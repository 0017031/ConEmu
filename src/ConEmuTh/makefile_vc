
.SILENT:

NAME=ConEmuTh
EXT =dll
X64SUFF=.x64
RELEASEDIR=..\..\Release\plugins\ConEmu\Thumbs
NEEDENTRY = 1
USE_PDB = 1
NEEDDEFLIB = 1
DEF_FILE = export.def

!include ../makefile_vc_defs

ALL: dirs build release

USERLIBS = kernel32.lib user32.lib gdi32.lib advapi32.lib shell32.lib ole32.lib version.lib


SUBMODULES = gdip pe ico

NEEDENTRY = 1


CPP_WIDE = $(CPP_WIDE) /DUSE_SEH

!ifndef DEBUG
CPP_OPT=/DNDEBUG /O1i /Fd$(PDB) /DHIDE_TODO 
CPP_DEBUG=
#/DCRTSTARTUP
!else
CPP_OPT=/DDEBUG /Od /Fd$(PDB) 
CPP_DEBUG=/Zi
#/DCRTSTARTUP
!endif

!ifdef AMD64
CPP_PROJ_NO=/nologo /c /W3 /wd4995 /Gy /GF /Zp8 /J $(COMPAT64) /GS- /Gr /GR- /EHs-c- /LD $(ENV_INC_OPT) $(CPP_WIDE) /D_CRT_SECURE_NO_WARNINGS /D_CRT_NONSTDC_NO_WARNINGS /D_CRT_NON_CONFORMING_SWPRINTFS /D_WIN32_WINNT=0x0500 $(USERCPP)
ULOUT=-Tpd+
LINK_MACHINE = /MACHINE:X64
!else
#../pvdCRT.lib
!ifdef CPP_UNALIGN
CPP_ALIGN=/Zp1
!endif
# /I"$(COMMON)"
CPP_PROJ_NO=/nologo /c /W3 /wd4995 /Gy /GF $(CPP_ALIGN) /J /Gr /GS- /GR- /EHs-c- /LD $(ENV_INC_OPT) $(CPP_WIDE) /D_CRT_SECURE_NO_WARNINGS /D_CRT_NONSTDC_NO_WARNINGS /D_CRT_NON_CONFORMING_SWPRINTFS /D_WIN32_WINNT=0x0500 /D_WINDLL $(USERCPP)
ULOUT=-Tpd -Re
LINK_MACHINE = /MACHINE:X86
!endif
CPP_PROJ=$(CPP_PROJ_NO) /Fo"$(INTDIR)\\"

LIBS = $(CRTLIB) $(USERLIBS)


LINK_FLAGS=/nologo /SUBSYSTEM:WINDOWS /DYNAMICBASE /dll /RELEASE $(LINK_MACHINE) $(NOWIN98) $(ENV_LIB_OPT) /def:"$(DEF_FILE)" /out:"$(OUTFULLNAME)" $(LINK_DEBUG)


CPPFLAGS = $(MP) $(CPP_PROJ) $(CPP_DEBUG) $(CPP_OPT)




!include ../makefile_vc_link


build: $(SUBMODULES) printname "$(OUTFULLNAME)"



$(RES): $(RC_NAME).rc
	@$(RC) $(ENV_INC_OPT) $(RC_WIDE) /fo"$(RES)" $(RC_NAME).rc




################

LINK_OBJS = \
$(INTDIR)\CEStr.obj \
$(INTDIR)\CmdLine.obj \
$(INTDIR)\Common.obj \
$(INTDIR)\ConEmuCheck.obj \
$(INTDIR)\ConEmuTh.obj \
$(INTDIR)\ConEmuTh1900.obj \
$(INTDIR)\ConEmuTh2800.obj \
$(INTDIR)\ConEmuTh995.obj \
$(INTDIR)\ConEmuThA.obj \
$(INTDIR)\Display.obj \
$(INTDIR)\HkFunc.obj \
$(INTDIR)\ImgCache.obj \
$(INTDIR)\MAssert.obj \
$(INTDIR)\Memory.obj \
$(INTDIR)\MProcess.obj \
$(INTDIR)\MSection.obj \
$(INTDIR)\MSectionSimple.obj \
$(INTDIR)\MSecurity.obj \
$(INTDIR)\MStrDup.obj \
$(INTDIR)\MStrSafe.obj \
$(INTDIR)\RgnDetect.obj \
$(INTDIR)\WFiles.obj \
$(INTDIR)\WObjects.obj \
$(INTDIR)\WThreads.obj \
$(INTDIR)\WUser.obj


################
#LINK_OBJS begin

$(INTDIR)\CEStr.obj: ../common/CEStr.cpp ../common/CEStr.h

$(INTDIR)\CmdLine.obj: ../common/CmdLine.cpp ../common/CmdLine.h

$(INTDIR)\common.obj: ../common/common.cpp

$(INTDIR)\ConEmuCheck.obj: ../common/ConEmuCheck.cpp ../common/ConEmuCheck.h

$(INTDIR)\ConEmuTh.obj: ConEmuTh.cpp

$(INTDIR)\ConEmuTh1900.obj: ConEmuTh1900.cpp

$(INTDIR)\ConEmuTh2800.obj: ConEmuTh2800.cpp

$(INTDIR)\ConEmuTh995.obj: ConEmuTh995.cpp

$(INTDIR)\ConEmuThA.obj: ConEmuThA.cpp

$(INTDIR)\Display.obj: Display.cpp

$(INTDIR)\HkFunc.obj: ../common/HkFunc.cpp ../common/HkFunc.h

$(INTDIR)\ImgCache.obj: ImgCache.cpp

$(INTDIR)\MAssert.obj: ../common/MAssert.cpp

$(INTDIR)\Memory.obj: ../common/Memory.cpp

$(INTDIR)\MProcess.obj: ../common/MProcess.cpp ../common/MProcess.h ../common/MToolHelp.h

$(INTDIR)\MSection.obj: ../common/MSection.cpp ../common/MSection.h

$(INTDIR)\MSectionSimple.obj: ../common/MSectionSimple.cpp ../common/MSectionSimple.h

$(INTDIR)\MSecurity.obj: ../common/MSecurity.cpp

$(INTDIR)\MStrDup.obj: ../common/MStrDup.cpp ../common/MStrDup.h

$(INTDIR)\MStrSafe.obj: ../common/MStrSafe.cpp

$(INTDIR)\RgnDetect.obj: ../common/RgnDetect.cpp

$(INTDIR)\WFiles.obj: ../common/WFiles.cpp ../common/WFiles.h

$(INTDIR)\WObjects.obj: ../common/WObjects.cpp

$(INTDIR)\WThreads.obj: ../common/WThreads.cpp ../common/WThreads.h

$(INTDIR)\WUser.obj: ../common/WUser.cpp

#LINK_OBJS end
##############


FICTIVE=_fictive_
$(FICTIVE):

$(SUBMODULES): $(FICTIVE)
	@echo $(CLR_MOD)===========$@.$(BIT_DESCR)$(CLR_STD)
	@cd Modules\$@
	@$(MAKE) -s -f makefile_vc $(_MDEFS)
	@cd ..\..

printname:
	@echo $(CLR_MOD)===========$(NAME).$(BIT_DESCR)$(CLR_STD)

"$(OUTFULLNAME)": $(LINK_OBJS) $(RES) $(LINK_DEP)
	@echo $(CLR_BRN)linking $@$(CLR_STD)
	@echo :: $(LINK_FLAGS) $(LIBS)
	$(LNK) @<<
	$(LINK_FLAGS) $(LIBS) $(LINK_OBJS) $(RES)
<<
