
= 2009.01.18 =

*) Решена проблема отрисовки больших окон с мелкими шрифтами, иными словами
большого буфера данных, на котором функции ReadConsoleOutput*() не работают.
Идея построчного чтения буфера заимствована из FAR исходников, но этот режим
включаем только при сбоях, а не при превышении фиксированного лимита, как там.

*) Добавлены конфигурации, что позволяет иметь разные наборы настроек для
разных программ или тех же программ, но в разных окнах. Конфигурация задается
только в командной строке параметром /Config ConfigName, в реестре создается
подключ ConEmu\ConfigName, где и хранятся индивидуальные настройки. Пример:

 ConEmu /Config ScrollMode /BufferHeight 9999 /Cmd PowerShell.exe

использует существующую (или создает новую, если будет сохранение опций)
конфигурацию 'ScrollMode'. Там в диалоге настроек заточим окно под вкусы
консоли с прокрукой, а не Фара: настройки порой хочется иметь разные.

*) Добавлен файл About-ConEmu.txt - микро хелп с официальной и технической
информацией, а то техническая нигде толком и не упомянута кроме форума.

*) В прошлой неупомянутой тут версии для режима с высотой буфера устранены
скачки выделения мышью. Это сделано вычурно, но работает, и другие пути не
найдены - невидимое настоящее окно консоли динамически двигается вместе с мышью
так, чтобы относительные координаты мыши в нем соответствовали текущим в
видимой виртуальной консоли - так удается перехитрить неизвестно что, но от
чего выделение могло прыгать.


= Experimental BufferHeight and some fixes 2008.07.03 =

ЗАПУСК С УСТАНОВКОЙ ВЫСОТЫ БУФЕРА КОНСОЛИ (РЕЖИМ ПРОКРУТКИ)

Дополнительный ключ: /BufferHeight <высота буфера>. Примеры:
conemu /BufferHeight 9999 /cmd cmd.exe
conemu /bufferheight 1000 /cmd powershell.exe -noexit myscript.ps1

Если команда /cmd не задана, берется сохраненная команда из реестра, если есть,
а если нет, то в режиме прокрутки запускается "cmd", а в стандартном режиме
сначала пытаемся запустить "far", потом "cmd".

Проверка на слишком маленькую или слишком большую заданную высоту буфера не
делается, рекомендуется выбирать ее так, что она заведомо больше высоты окна (в
строках), но не больше 9999, что является магическим ограничением высоты буфера
в виндовом диалоге настроек консоли.

Режим прокрутки предназначен в первую очередь для интерактивных сессий в
оболочках типа Cmd или PowerShell и не предназначен для программ типа FAR.
FAR, как и раньше следует запускать без всяких /BufferHeight - при этом
установка родителя окна консоли ДЕЛАЕТСЯ, то есть плагины, которые этого
ожидают, это и получают.

ПРИМЕЧАНИЕ: если величина /BufferHeight отрицательная, то это является
указанием принудительно установить родителя консольного окна. Это может быть
нужно, например, для нормальной работы приложений или плагинов FAR, которые
ожидают, что у консоли родительское окно - это окно ConEmu. В таком режиме в
процессе выделения мышью выделение может скакнуть в левый верхний угол - как
бороться - пока неясно, но если продолжать выделение, оно "восстанавливается".
Фиксится это пока не будет, ибо по нормальному приложения должны находить окно
ConEmu более универсальным способом (от hoopoe, см. форум по ConEmu).

ОПИСАНИЕ РЕЖИМА ПРОКРУТКИ

*) Окно имеет стандартную вертикальную полосу прокрутки.
*) Управление прокруткой с клавиатуры:
- CtrlPgUp, CtrlPgDn листают страницы вверх-вниз
- CtrlUp, CtrlDn прокручивают вверх-вниз построчно
*) Работа с выделением только мышью: выделение - левой кнопкой с перемещением,
копирование и вставка - правой кнопкой.

ПРОЧИЕ ИЗМЕНЕНИЯ

*) Исправлен мелкий дефект в отрисовке курсора: он мог ошибочно оставаться
отрисованным в поле ввода после перехода с поля ввода на кнопку или другой
элемент диалога, при активации которого курсор должен скрываться.

ТЕХНИЧЕСКИЕ ПОДРОБНОСТИ

*) Реализована отрисовка выделения (работает только в режиме прокрутки).
*) В режиме прокрутки положение окна консоли подгоняется под положение мыши -
это нужно для корректной работы выделения в оригинальной консоли.
*) В режиме прокрутки при старте устанавливаем QuickEdit режим, это нужно для
возможности выделения мышью в оригинальной консоли.
*) Установка параметров окна консоли в буфер режиме (предложено hoopoe): при
первом вызове устанавливаем высоту буфера /BufferHeight, при последующих смотрим
на наличие вертикальной прокрутки: если есть, то сохраняем текущую высоту буфера
(она может быть уже и не равна /BufferHeight), иначе подгоняем под высоту окна.
*) WM_MOUSEWHEEL теперь обрабатывается как событие мыши, нужно для прокрутки.
*) WM_RBUTTONUP НЕ обрабатывается (как и было раньше), чтобы избежать
нежелательного появления консольного меню в некоторых ситуациях. Добавлен
комментарий в коде.
*) WM_RBUTTONDBLCLK преобразовывается в WM_RBUTTONDOWN (как и было раньше). По
задумке Zoin это помогает быстро быделить и тут же развыделить элемент панели
Фара двойным правым кликом (не знаю зачем, но считаем, что автору видней).
Добавлен комментарий в коде.



= Version 2008.03.26 =

ПОНЕНЦИАЛЬНАЯ ПРОБЛЕМА ПЕРВОЙ ОТРИСОВКИ

При размерах окна равных дефолтным размерам консоли теоретически была возможна
неправильная первая отрисовка некоторых случайных символов (баг оптимизации).
Исправлено.

ИЗМЕНЕНИЯ В ЛОГИКЕ ОТРИСОВКИ КУРСОРА

При потере фокуса окна курсор оставался видимым или невидимым в зависимости от
его текущего состояния. Стандартное же поведение для неактивного окна - гасить
курсор. Сделано по стандартному.

Символ под курсором и некоторые идущие за ним иногда рисовались даже если это не
нужно; исправлено. Прирост скорости небольшой, но все ж так лучше.

ИСПРАВЛЕНА НАСТРОЙКА ШРИФТА BOLD

Настройка сохранялась, но считывалась неверно - исправлено.

ТЕХИНФО: АЛЬТЕРНАТИВНЫЙ ШРИФТ РАМОК

[HKEY_CURRENT_USER\Software\ConEmu]
"FontName2"="Courier New"
"FontSizeX2"=hex:0b,00,00,00

FontName2 задает альтернативный шрифт рамок, "Lucida Console" по умолчанию.
Однако, при основном шрифте, например, "Consolas" спец. символы оказываются
шире, чем надо, и тогда "Courier New" выглядит неплохой заменой.

В зависимости от разных параметров одного указания шрифта рамок может быть
недостаточно, и для точной настройки надо еще подогнать его ширину, то есть
параметр FontSizeX2. Демо: основной шрифт "Consolas" 16 x 10, тогда для
рамочного "Courier New" его ширина почему-то должна быть 11 (0xB).

ПРОЧИЕ КОСМЕТИЧЕСКИЕ ИЗМЕНЕНИЯ

Меню: текст &Settings заменен на S&ettings, чтобы избежать конфликта с хоткеем
пункта &Size в режиме обычного окна.

Слегка упрощена отрисовка с фоновой картинкой, когда происходит только
перемещение курсора, в комстроке, например.

Кое-где устранены лишние вспомогательные вызовы установки размера буфера консоли
(по-моему, лишние, но если у Zoin были на это виды - решать ему).



= Version 2008.02.23 =

ИЗМЕНЕНА ЛОГИКА ЗАПУСКА ПРИЛОЖЕНИЯ

Было так: если команда пустая, то сначала запускается она, и в случае сбоя (а он
всегда) запускается Far или Cmd. Итого всегда лишняя попытка запустить пустую
команду. Если команда не пустая, но не запускается, то вместо сообщения о сбое
запускается Far или Cmd; это и нелогично, и может создать иллюзию, что команда
отработала, например, если конечной целью и был запуск Фара, но сначала должно
было выполниться что-то еще, что не отработало. Предлагается так: если команда
пуста, то запускаем Far или Cmd, если не пуста - запускаем ее, а в случае сбоя -
сообщаем об ошибке и выходим.

ТЕХИНФО: АЛЬТЕРНАТИВНЫЙ ШРИФТ ДЛЯ ИСПРАВЛЕНИЯ РАМОК

[HKEY_CURRENT_USER\Software\ConEmu]
"FontName2"="courier new"

Задает альтернативный шрифт для исправления рамок; по умолчанию используется
шрифт "lucida console", который неплох для самих рамок, но жирноват для прочих
специальных символов, отчего они слегка наезжают на соседей по ширине. "courier
new" выглядит неплохой заменой, например, если основной шрифт "consolas".



= Version 2008.02.21 =

УВЕЛИЧЕНА СКОРОСТЬ ОТРИСОВКИ

В VirtualConsole::Update не перерисовываем символы, которые не изменились,
при этом делаем не только глобальную проверку в самом начале, но проверяем
каждый символ и атрибуты в самом процессе в цикле по строке. Это позволяет
избежать изрядного числа перерисовок. Особо проверяем и перерисовываем
символ под старой позицией курсора. Однако, если уже начали рисовать, то
рисуем максимум подходящих символов включая и неизменные (проверено, так
быстрее, чем несколько раз отрисовывать разрозненные цепочки).

Render time (округлено на глазок, в худшую для новой версии сторону):
*) В панелях старый вариант - 1000000 на любой операции, новый вариант -
набор в ком. строке - 2300, навигация вверх-вниз по файлам без прокрутки -
2500, с прокруткой - 150000.
*) В редакторе старый вариант - 850000 при любой операции, в новой версии -
перемещение без прокрутки - обычно не более 3000, с прокруткой зависит от
длины строк, ширины экрана и расцветки, на типичном файле с исходным кодом с
не очень длинными строками и с колорером ускорение в 3-4 раза.
*) Оптимизирована и форсированная перерисовка (весь экран, например, при
смене опций в диалоге), но разница в производительности не так заметна,
конечно.

Еще устранены несколько вероятно лишних перерисовок при запуске (один вызов,
когда окно еще не окончательное и один или два лишних прохода из-за курсора)

ИСПРАВЛЕН СИМВОЛ ПОД КУРСОРОМ В РЕЖИМЕ РАМОК

Наблюдался нежелательный эффект - символ под курсором в режиме исправления
рамок иногда рисовался юникодным фонтом (видимо, последним выбранным до
этого для рамок). Исправлено.



= Author =

Roman Kuzmin (aka NightRoman)
http://code.google.com/p/farnet/
PowerShell and .NET in FAR Manager
